@use "sass:math";
@use "sass:list";
@import './variables.scss';

.circle {
  position: absolute;
  // max-height: 65%;
}

@each $circle in $circles {
  $index: index($circles, $circle);
  .circle-layer-#{$index} {
    background-color: $circle;
    $size: 0;
    @if $index <= $circlesMiddle {
      left: 0;
      top: 0;
      $size: $circle-default-heigth * $index;
      border-radius: 0 0 100% 0;
    } @else {
      $reverseIndex: abs($index - $circlesCount) + 1;
      bottom: 0;
      right: 0;
      $size: $circle-default-heigth * $reverseIndex * 0.75;
      border-radius: 100% 0 0 0;
    }
    @media screen and (max-width: 639.98px) {
      height: $size * 2;
      width: $size * 2;
    }
    @media screen and  (min-width: 640px) and (max-width: 1199.98px) {
      height: $size * 1.35;
      width: $size * 1.35;
    }
    @media screen and (min-width: 1200px) {
      height: $size * 1.5;
      width: $size * 1.5;
    }
  }
};

.bar {
  position: absolute;
  height: 100%;
  width: calc(100vw - 25px);
  margin-left: -1rem;
  display: flex;
  justify-content: space-between;

  &::before {
    position: absolute;
    content: "";
    width: 100vw;
    border-bottom: 10px solid white;
    height: 40px;
  }

  &::after {
    position: absolute;
    content: "";
    height: 100vh;
    width: 40px;
    border-right: 10px solid white;
  }

  &__ticks {
    display: inline-block;
    width: 8vw;
    max-height: calc(100vh - 75px);
    min-width: 30px;
    margin-top: 60px;
    border-radius: 20px 20px 45px 45px;
  }

  .bar__ticks--1 {
    margin-left: 4rem;
  }

  @each $circle in $circles {
    $index: index($circles, $circle);
    $left: ($index * 5);
    @if $index > 1 {
      $left: 5 + (($index - 1) * 7) + (($index - 1) * 9)
    }
    .bar__ticks--#{$index} {
      $tick_height: 0;

      // Mobile devices
      @media (max-width: 575.98px) {
        $tick_height: math.random($bar-tick-min-height-mobile);
        @if $tick_height < $bar-tick-min-height-mobile {
          $tick_height: $tick_height + $bar-tick-min-height-mobile;
        }
        box-shadow: 5px 0px 0px darken($circle, 5%) !important;
      }

      // Small devices (landscape phones, 576px and up)
      @media (min-width: 576px) and (max-width: 991.98px) {
        $tick_height: math.random($bar-tick-min-height-tablet);
        @if $tick_height < $bar-tick-min-height-tablet {
          $tick_height: $tick_height + $bar-tick-min-height-tablet;
        }
        box-shadow: 8px 0px 0px darken($circle, 5%) !important;
      }

      // Large devices
      @media (min-width: 992px) {
        $tick_height: math.random($bar-tick-min-height);
        @if $tick_height < $bar-tick-min-height {
          $tick_height: $tick_height + $bar-tick-min-height;
        }
        box-shadow: 10px 2px 0px darken($circle, 5%) !important;
      }
      height: #{$tick_height}vh;
      background-color: $circle;
    }
  }
}

$doughnut-size: 10;

.doughnuts {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
  margin: 0px;
}

.doughnut {
  position: relative;
  border-radius: 50%;
  width: 30vw;
  height: 30vw;

  @media (min-width: 480px) {
    width: 22vw;
    height: 22vw;
  }

  @media (min-width: 768px) {
    width: 30vw;
    height: 30vw;
  }

  @media (min-width: 992px) {
    width: 22vw;
    height: 22vw;
  }

  @media (min-width: 1200px) {
    width: 25vw;
    height: 25vw;
  }
  
  &::before,
  &::after {
    content: '';
    position: absolute;
    width: 50%;
    height: 50%;
  }

  &::before {
    top: -1px;
    bottom: auto;
    right: auto;
    left: 0;
    border-radius: 100% 0 0 0;
  }

  &::after {
    top: auto;
    bottom: -1px;
    right: 0;
    left: auto;
    border-radius: 0 0 100% 0;
  }

  &__punch {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 33.3%;
    height: 33.3%;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    border: 3px solid white;
    z-index: 1;
  }
}

$wheel: 15em;
@each $circle in $circles {
  $index: index($circles, $circle);
  $color_2nd: $circle;
  $color_3rd: $circle;

  @if $index < length($circles) - 1 {
    $color_2nd: list.nth($circles, $index + 1);
    $color_3rd: list.nth($circles, $index + 2);
  } @else {
    $color_2nd: list.nth($circles, 1);
    $color_3rd: list.nth($circles, 2);
  }
  
  .doughnut--#{$index} {
    background: $circle;
    border: 1px solid darken($circle, 5%);
    $layer-border: 3px solid white;
    
    @media (max-width: 767.98px) {
      box-shadow: 5px -1px 0px 0px darken($circle, 7%) !important;
    }

    @media (min-width: 768px) {
      box-shadow: 14px -1px 0px 0px darken($circle, 7%) !important;
    }
    
    &::before {
      border-right: $layer-border;
      border-bottom: $layer-border;
      background-color: $color_2nd;
    }
    
    &::after {
      background-color: $color_3rd;
      border-left: $layer-border;
      border-top: $layer-border;

      @media (max-width: 767.98px) {
        box-shadow: 7px 0px 0px -1px darken($color_3rd, 7%) !important;
      }
  
      @media (min-width: 768px) {
        box-shadow: 16px 0px 0px -1px darken($color_3rd, 7%) !important;
      }
    }

    > .doughnut__punch {
      background-color: $circle;
      box-shadow: inset 17px 0px 0px 0px darken($circle, 7%) !important;
    }
  }
}